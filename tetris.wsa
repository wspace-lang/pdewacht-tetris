; Copyright 2008 Peter De Wachter
; Copyright 2020 Andrew Archibald

; Heap:
;   0-113
;   121-352 board
;   360     seed
;   362
;   363

; Label mapping:
;   0   init_heap_loop
;   1   .init_heap_done
;   2   init_board
;   4   .init_board_fill
;   3   .init_board_bottom
;   6   label_6
;   11  label_11
;   14  label_14
;   15  label_15
;   16  label_16
;   17  label_17
;   18  label_18
;   20  label_20
;   21  label_21
;   22  label_22
;   19  label_19
;   23  label_23
;   9   label_9
;   7   seed
;   24  label_24
;   27  label_27
;   29  label_29
;   30  label_30
;   28  label_28
;   32  label_32
;   33  label_33
;   34  label_34
;   8   label_8
;   35  .neg
;   10  label_10
;   13  label_13
;   36  label_36
;   37  label_37
;   39  label_39
;   40  label_40
;   31  label_31
;   5   label_5
;   43  label_43
;   41  label_41
;   12  cursor_21_24
;   25  reverse
;   38  background
;   26  reset
;   42  print_spaces
;   44  .print_spaces_done
;   45  dump_stack
;   46  .dump_stack_loop
;   47  dump_heap
;   48  .dump_heap_loop

; Store values at addresses 0-113

    1  0  1  11 12 0   ; 0-5
    2  11 12 13 14 7   ; 6-11
    3  0  1  2  13 8   ; 12-17
    4  0  1  2  11 11  ; 18-23
    5  0  1  2  12 14  ; 24-29
    6  0  1  12 13 17  ; 30-35
    7  1  2  11 12 18  ; 36-41
    2  1  12 23 34 1   ; 42-47
    3  1  12 22 23 9   ; 48-53
    3  0  11 12 13 10  ; 54-59
    3  0  1  11 22 2   ; 60-65
    4  0  1  12 23 12  ; 66-71
    4  2  11 12 13 13  ; 72-77
    4  0  11 22 23 3   ; 78-83
    5  1  11 12 23 15  ; 84-89
    5  1  11 12 13 16  ; 90-95
    5  0  11 12 22 4   ; 96-101
    6  1  11 12 22 5   ; 102-107
    7  0  11 12 23 6   ; 108-113

    113 ; Loop counter
init_heap_loop:
    swap copy 1 swap
    store
    1 -
    dup
    jn .init_heap_done
    jmp init_heap_loop
.init_heap_done:
    drop

    ; Initial seed
    360 123456 store

; Initialize board at addresses 121-352
;
;   121: -2  0  0  0  0  0  0  0  0  0  0
;   132: -2  0  0  0  0  0  0  0  0  0  0
;   143: -2  0  0  0  0  0  0  0  0  0  0
;   154: -2  0  0  0  0  0  0  0  0  0  0
;   165: -2  0  0  0  0  0  0  0  0  0  0
;   176: -2  0  0  0  0  0  0  0  0  0  0
;   187: -2  0  0  0  0  0  0  0  0  0  0
;   198: -2  0  0  0  0  0  0  0  0  0  0
;   209: -2  0  0  0  0  0  0  0  0  0  0
;   220: -2  0  0  0  0  0  0  0  0  0  0
;   231: -2  0  0  0  0  0  0  0  0  0  0
;   242: -2  0  0  0  0  0  0  0  0  0  0
;   253: -2  0  0  0  0  0  0  0  0  0  0
;   264: -2  0  0  0  0  0  0  0  0  0  0
;   275: -2  0  0  0  0  0  0  0  0  0  0
;   286: -2  0  0  0  0  0  0  0  0  0  0
;   297: -2  0  0  0  0  0  0  0  0  0  0
;   308: -2  0  0  0  0  0  0  0  0  0  0
;   319: -2  0  0  0  0  0  0  0  0  0  0
;   330: -2  0  0  0  0  0  0  0  0  0  0
;   341: -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2
;
    121 ; Loop counter
init_board:
    ; Edge
    dup -2 store
    dup 341 -
    jz .init_board_bottom
.init_board_fill:
    1 +
    ; Center
    dup 0 store
    dup 11 %
    jz init_board
    jmp .init_board_fill
.init_board_bottom:
    1 +
    ; Bottom
    dup -2 store
    dup 352 -
    jn .init_board_bottom
    drop
    call label_5

label_6:
    5
    call seed
    call label_8
    jn label_9
    call label_10
label_11:
    call cursor_21_24
    361 readc
    call label_13
    copy 1
    copy 1
    361 retrieve 106 - jz label_14
    361 retrieve 107 - jz label_15
    361 retrieve 108 - jz label_16
    361 retrieve 105 - jz label_17
    361 retrieve 27  - jz label_18
    jmp label_19
label_14:
    swap 1 - swap
    jmp label_20
label_15:
    swap 11 + swap
    jmp label_21
label_16:
    swap 1 + swap
    jmp label_20
label_17:
    5 +
    retrieve
    6 *
    jmp label_20
label_18:
    drop
    drop
    jmp label_9
label_20:
    call label_8
    jn label_19
    jmp label_22
label_21:
    call label_8
    jn label_23
    jmp label_22
label_22:
    call label_10
    362 swap store
    363 swap store
    drop
    drop
    363 retrieve
    362 retrieve
    call label_10
    jmp label_11
label_19:
    drop
    drop
    call label_10
    jmp label_11
label_23:
    drop
    drop
    call label_10
    drop
    drop
    call label_24
    jmp label_6
label_9:
    call label_10
    drop
    drop
    call cursor_21_24
    call reverse
    ' '  printc
    '\n' printc
    '\e' printc
    '['  printc
    'G'  printc
    call reset
    end

seed:
    ; Update the seed to (seed*279470273)%4294967291
    360 retrieve
    279470273 * 4294967291 %
    dup
    360 swap store
    ; Return (seed%7)*6
    7 % 6 *
    ret

label_24:
    341
label_27:
    11 / 11 * 1 -
    dup
    122 -
    jn label_28
label_29:
    dup
    retrieve
    jz label_27
    1 -
    dup
    11 %
    jz label_30
    jmp label_29
label_30:
    dup
    11 / 10 -
    call label_31
    dup
    call label_32
    11 +
    jmp label_27
label_28:
    drop
    ret

label_32:
    dup
    dup retrieve
    swap 11 + swap store
    dup 122 -
    jz label_33
    1 -
    jmp label_32
label_33:
    dup 0 store
    1 +
    dup 11 %
    jz label_34
    jmp label_33
label_34:
    drop
    ret

label_8:
    copy 1
    copy 1
    swap 121 + swap
    1 + dup retrieve copy 2 + retrieve jn .neg
    1 + dup retrieve copy 2 + retrieve jn .neg
    1 + dup retrieve copy 2 + retrieve jn .neg
    1 + dup retrieve copy 2 + retrieve jn .neg
    drop drop 0
    ret
.neg:
    drop drop -1
    ret

label_10:
    call label_36
    swap 121 + swap
    1 + dup retrieve copy 2 + -1 store
    1 + dup retrieve copy 2 + -1 store
    1 + dup retrieve copy 2 + -1 store
    1 + dup retrieve copy 2 + -1 store
    4 -
    swap 121 - swap
    ret

label_13:
    call label_37
    swap 121 + swap
    1 + dup retrieve copy 2 + 0 store
    1 + dup retrieve copy 2 + 0 store
    1 + dup retrieve copy 2 + 0 store
    1 + dup retrieve copy 2 + 0 store
    4 -
    swap 121 - swap
    ret

label_36:
    dup
    retrieve call background
    jmp label_39
label_37:
    0 call background ; black
label_39:
    1 + dup retrieve copy 2 + call label_40
    1 + dup retrieve copy 2 + call label_40
    1 + dup retrieve copy 2 + call label_40
    1 + dup retrieve copy 2 + call label_40
    4 -
    ret

label_40:
    dup
    ; Move cursor to line (n/11+1), col ((n%11)*2+1)
    '\e' printc
    '['  printc
    11 / 1 + printi
    ';'  printc
    11 % 2 * 1 + printi
    'H'  printc
    ; ?
    '\e' printc
    '['  printc
    '2'  printc
    'X'  printc
    ' '  printc
    ' '  printc
    ret

label_31:
    call reset
    '\e' printc
    '['  printc
    printi
    'H'  printc
    '\e' printc
    '['  printc
    '1'  printc
    'M'  printc
    jmp label_41

label_5:
    ; Clear entire screen
    '\e' printc
    '['  printc
    '2'  printc
    'J'  printc
    ; ?
    '\e' printc
    '['  printc
    'H'  printc
    call reverse
    23 call print_spaces
    -20
label_43:
    call label_41
    1 +
    dup
    jn label_43
    drop
    ret

label_41:
    call reset
    ; Move cursor to upper left corner
    '\e' printc
    '['  printc
    'H'  printc
    ; ?
    '\e' printc
    '['  printc
    'L'  printc
    call reverse
    ' '  printc
    ' '  printc
    ; Move cursor to column 23
    '\e' printc
    '['  printc
    '2'  printc
    '3'  printc
    'G'  printc
    ' '  printc
    ' '  printc
    ret

; Move cursor to line 21, col 24
cursor_21_24:
    '\e' printc
    '['  printc
    '2'  printc
    '1'  printc
    ';'  printc
    '2'  printc
    '4'  printc
    'H'  printc
    jmp reset

; Reverse video on
reverse:
    '\e' printc
    '['  printc
    '0'  printc
    ';'  printc
    '7'  printc
    'm'  printc
    ret

; Reset attributes and set background color, given 0-7
;   40 black
;   41 red
;   42 green
;   43 yellow
;   44 blue
;   45 magenta
;   46 cyan
;   47 white
background:
    '\e' printc
    '['  printc
    '0'  printc
    ';'  printc
    '4'  printc
    printi
    'm'  printc
    ret

; Reset all attributes
reset:
    '\e' printc
    '['  printc
    '0'  printc
    'm'  printc
    ret

; Print a given number of spaces
print_spaces:
    dup jz .print_spaces_done
    ' ' printc
    1 -
    jmp print_spaces
.print_spaces_done:
    drop
    ret

; Print "Crash!" and dump the stack
dump_stack:
    '\n' printc
    'C'  printc
    'r'  printc
    'a'  printc
    's'  printc
    'h'  printc
    '!'  printc
    '\n' printc
.dump_stack_loop:
    printi
    '\n' printc
    jmp .dump_stack_loop

; Dump heap values above 121
dump_heap:
    121
.dump_heap_loop:
    dup retrieve printi
    ';' printc
    1 +
    jmp .dump_heap_loop
