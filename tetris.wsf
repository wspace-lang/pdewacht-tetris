# Copyright 2008 Peter De Wachter
# Copyright 2020-2021 Andrew Archibald

# Heap partitions:
#   0-113
#   121-352 board
#   360     rand
#   361     read char
#   362
#   363

# Labels are assigned in order of usage

# Store values at addresses 0-113

    1  0  1  11 12 0   # 0-5
    2  11 12 13 14 7   # 6-11
    3  0  1  2  13 8   # 12-17
    4  0  1  2  11 11  # 18-23
    5  0  1  2  12 14  # 24-29
    6  0  1  12 13 17  # 30-35
    7  1  2  11 12 18  # 36-41
    2  1  12 23 34 1   # 42-47
    3  1  12 22 23 9   # 48-53
    3  0  11 12 13 10  # 54-59
    3  0  1  11 22 2   # 60-65
    4  0  1  12 23 12  # 66-71
    4  2  11 12 13 13  # 72-77
    4  0  11 22 23 3   # 78-83
    5  1  11 12 23 15  # 84-89
    5  1  11 12 13 16  # 90-95
    5  0  11 12 22 4   # 96-101
    6  1  11 12 22 5   # 102-107
    7  0  11 12 23 6   # 108-113

    113 # Loop counter
init_heap_loop:
    swap ^1 swap
    store
    1 -
    ^ jn .init_heap_done
    jmp init_heap_loop
.init_heap_done:
    drop

    # Initial seed
    360 123456 store

# Initialize board at addresses 121-352
#
#   121: -2  0  0  0  0  0  0  0  0  0  0
#   132: -2  0  0  0  0  0  0  0  0  0  0
#   143: -2  0  0  0  0  0  0  0  0  0  0
#   154: -2  0  0  0  0  0  0  0  0  0  0
#   165: -2  0  0  0  0  0  0  0  0  0  0
#   176: -2  0  0  0  0  0  0  0  0  0  0
#   187: -2  0  0  0  0  0  0  0  0  0  0
#   198: -2  0  0  0  0  0  0  0  0  0  0
#   209: -2  0  0  0  0  0  0  0  0  0  0
#   220: -2  0  0  0  0  0  0  0  0  0  0
#   231: -2  0  0  0  0  0  0  0  0  0  0
#   242: -2  0  0  0  0  0  0  0  0  0  0
#   253: -2  0  0  0  0  0  0  0  0  0  0
#   264: -2  0  0  0  0  0  0  0  0  0  0
#   275: -2  0  0  0  0  0  0  0  0  0  0
#   286: -2  0  0  0  0  0  0  0  0  0  0
#   297: -2  0  0  0  0  0  0  0  0  0  0
#   308: -2  0  0  0  0  0  0  0  0  0  0
#   319: -2  0  0  0  0  0  0  0  0  0  0
#   330: -2  0  0  0  0  0  0  0  0  0  0
#   341: -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2
#
    121 # Loop counter
init_board:
    # Edge
    ^ -2 store
    ^ 341 - jz .init_board_bottom
.init_board_fill:
    1 +
    # Center
    ^ 0 store
    ^ 11 % jz init_board
    jmp .init_board_fill
.init_board_bottom:
    1 +
    # Bottom
    ^ -2 store
    ^ 352 - jn .init_board_bottom
    drop
    call clear

label_6:
    5
    call rand
    call 4x_jn
    jn label_9

    call 4x_store_n1
read_key:
    call cursor_21_24
    361 readc
    call 4x_store_0
    2dup
    361 retrieve 'j'  - jz .read_j
    361 retrieve 'k'  - jz .read_k
    361 retrieve 'l'  - jz .read_l
    361 retrieve 'i'  - jz .read_i
    361 retrieve '\e' - jz .read_esc
    jmp label_19
.read_j:
    swap 1 - swap
    jmp label_20
.read_k:
    swap 11 + swap
    jmp label_21
.read_l:
    swap 1 + swap
    jmp label_20
.read_i:
    5 + retrieve 6 *
    jmp label_20
.read_esc:
    2drop
    jmp label_9

label_20:
    call 4x_jn
    jn label_19
    jmp label_22

label_21:
    call 4x_jn
    jn label_23
    jmp label_22

label_22:
    call 4x_store_n1
    362 swap store
    363 swap store
    2drop
    363 retrieve
    362 retrieve
    call 4x_store_n1
    jmp read_key
label_19:
    2drop
    call 4x_store_n1
    jmp read_key
label_23:
    2drop
    call 4x_store_n1
    2drop
    call label_24
    jmp label_6
label_9:
    call 4x_store_n1
    2drop
    call cursor_21_24
    call reverse
    " \n\e[G" prints
    call reset
    end

# ( -- rand)
rand:
    # Update the rand state to (state*279470273)%4294967291
    360 retrieve
    279470273 * 4294967291 %
    ^ 360 swap store
    # Return (state%7)*6
    7 % 6 *
    ret

label_24:
    341
label_27:
    11 / 11 * 1 -
    ^ 122 - jn label_28
label_29:
    ^ retrieve jz label_27
    1 -
    ^ 11 % jz label_30
    jmp label_29
label_30:
    ^ 11 / 10 -
    call label_31
    ^
    call some_loop
    11 +
    jmp label_27
label_28:
    drop
    ret

# (n -- )
some_loop:
    ^ ^ retrieve
    swap 11 + swap store
    ^ 122 - jz label_33
    1 -
    jmp some_loop
# (122 -- )
label_33:
    ^ 0 store
    1 +
    ^ 11 % jz label_34
    jmp label_33
label_34:
    drop
    ret

# (x y -- )
4x_jn:
    2dup
    swap 121 + swap
    1 + ^ retrieve ^2 + retrieve jn .neg
    1 + ^ retrieve ^2 + retrieve jn .neg
    1 + ^ retrieve ^2 + retrieve jn .neg
    1 + ^ retrieve ^2 + retrieve jn .neg
    2drop 0
    ret
.neg:
    2drop -1
    ret

4x_store_n1:
    call label_36
    swap 121 + swap
    1 + ^ retrieve ^2 + -1 store
    1 + ^ retrieve ^2 + -1 store
    1 + ^ retrieve ^2 + -1 store
    1 + ^ retrieve ^2 + -1 store
    4 -
    swap 121 - swap
    ret

4x_store_0:
    call label_37
    swap 121 + swap
    1 + ^ retrieve ^2 + 0 store
    1 + ^ retrieve ^2 + 0 store
    1 + ^ retrieve ^2 + 0 store
    1 + ^ retrieve ^2 + 0 store
    4 -
    swap 121 - swap
    ret

label_36:
    ^ retrieve call background
    jmp 4x_call
label_37:
    0 call background # black
4x_call:
    1 + ^ retrieve ^2 + call label_40
    1 + ^ retrieve ^2 + call label_40
    1 + ^ retrieve ^2 + call label_40
    1 + ^ retrieve ^2 + call label_40
    4 -
    ret

# (n -- )
label_40:
    ^
    # Move cursor to line (n/11+1), col ((n%11)*2+1)
    "\e[" prints
    11 / 1 + printi
    ';' printc
    11 % 2 * 1 + printi
    'H' printc
    # ?
    "\e[2X  " prints
    ret

# (n -- )
label_31:
    call reset
    "\e[" prints
    printi
    "H\e[1M" prints
    jmp label_41

# ( -- )
clear:
    # Clear entire screen
    "\e[2J" prints
    # Move cursor to upper left corner
    "\e[H" prints
    call reverse
    23 call print_spaces
    -20
label_43:
    call label_41
    1 +
    ^ jn label_43
    drop
    ret

# ( -- )
label_41:
    call reset
    # Move cursor to upper left corner
    "\e[H" prints
    # ?
    "\e[L" prints
    call reverse
    # Move cursor to column 23
    "  \e[23G  " prints
    ret

# Move cursor to line 21, col 24
# ( -- )
cursor_21_24:
    "\e[21;24H" prints
    jmp reset

# Reverse video on
# ( -- )
reverse:
    "\e[0;7m" prints
    ret

# Reset attributes and set background color, given 0-7
#   40 black
#   41 red
#   42 green
#   43 yellow
#   44 blue
#   45 magenta
#   46 cyan
#   47 white
# (color -- )
background:
    "\e[0;4" prints
    printi
    'm' printc
    ret

# Reset all attributes
# ( -- )
reset:
    "\e[0m" prints
    ret

# Print n spaces
# (n -- )
print_spaces:
    ^ jz .print_spaces_done
    ' ' printc
    1 -
    jmp print_spaces
.print_spaces_done:
    drop
    ret

# Print "Crash!" and dump the stack
# ( -- )
dump_stack:
    "\nCrash!\n" prints
.dump_stack_loop:
    printi
    '\n' printc
    jmp .dump_stack_loop

# Dump heap values above 121
# ( -- )
dump_heap:
    121
.dump_heap_loop:
    ^ retrieve printi
    ';' printc
    1 +
    jmp .dump_heap_loop
