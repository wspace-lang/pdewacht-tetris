# Copyright 2008 Peter De Wachter
# Copyright 2020-2022 Andrew Archibald

# Heap usage:
#   0-113   piece rotations
#   114     rand
#   115     read char
#   116     tmp
#   117     tmp
#   121-352 board

# A piece rotation is encoded as a 6-tuple containing the color ID (1-7),
# offsets for the four blocks, and the index of the next rotation for that
# piece. The L piece should be orange, but white is used as a substitute.
#
# Piece rotations:
#
#   0
#   XX..
# O XX..  (3 yellow)
#   ....
#   ....
#
#   1     7
#   ....  .X..
# I XXXX  .X..  (6 cyan)
#   ....  .X..
#   ....  .#..
#
#   4     14    15    16
#   XXX.  .X..  .X..  X...
# T .X..  XX..  XXX.  XX..  (5 magenta)
#   ....  .X..  ....  X...
#   ....  ....  ....  ....
#
#   3     11    12    13
#   XXX.  XX..  ..X.  X...
# L X...  .X..  XXX.  X...  (7 white)
#   ....  .X..  ....  XX..
#   ....  ....  ....  ....
#
#   2     8     9     10
#   XXX.  .X..  X...  XX..
# J ..X.  .X..  XXX.  X...  (4 blue)
#   ....  XX..  ....  X...
#   ....  ....  ....  ....
#
#   6     18
#   .XX.  X...
# S XX..  XX..  (2 green)
#   ....  .X..
#   ....  ....
#
#   5     17
#   XX..  .X..
# Z .XX.  XX..  (1 red)
#   ....  X...
#   ....  ....
#
# Block offsets in 4x4 grid:
#   0  1  2  4
#   11 12 13 14
#   22 23 24 25
#   33 34 35 36

    3  0  1  11 12 0  # O 0
    6  11 12 13 14 7  # I 1
    5  0  1  2  12 8  # T 2
    7  0  1  2  11 11 # L 3
    4  0  1  2  13 14 # J 4
    2  1  2  11 12 17 # S 5
    1  0  1  12 13 18 # Z 6
    6  1  12 23 34 1  # I 7
    5  1  11 12 23 9  # T 8
    5  1  11 12 13 10 # T 9
    5  0  11 12 22 2  # T 10
    7  0  1  12 23 12 # L 11
    7  2  11 12 13 13 # L 12
    7  0  11 22 23 3  # L 13
    4  1  12 22 23 15 # J 14
    4  0  11 12 13 16 # J 15
    4  0  1  11 22 4  # J 16
    2  0  11 12 23 5  # S 17
    1  1  11 12 22 6  # Z 18

    # Store piece rotations at addresses 0-113
    113
.init_pieces:
    swap ^1 swap
    store
    1-
    ^ jn .init_pieces__break
    jmp .init_pieces
.init_pieces__break:
    drop

    # Initial seed
    114 123456 store

# Initial board:
#
#   121: -2  0  0  0  0  0  0  0  0  0  0
#   132: -2  0  0  0  0  0  0  0  0  0  0
#   143: -2  0  0  0  0  0  0  0  0  0  0
#   154: -2  0  0  0  0  0  0  0  0  0  0
#   165: -2  0  0  0  0  0  0  0  0  0  0
#   176: -2  0  0  0  0  0  0  0  0  0  0
#   187: -2  0  0  0  0  0  0  0  0  0  0
#   198: -2  0  0  0  0  0  0  0  0  0  0
#   209: -2  0  0  0  0  0  0  0  0  0  0
#   220: -2  0  0  0  0  0  0  0  0  0  0
#   231: -2  0  0  0  0  0  0  0  0  0  0
#   242: -2  0  0  0  0  0  0  0  0  0  0
#   253: -2  0  0  0  0  0  0  0  0  0  0
#   264: -2  0  0  0  0  0  0  0  0  0  0
#   275: -2  0  0  0  0  0  0  0  0  0  0
#   286: -2  0  0  0  0  0  0  0  0  0  0
#   297: -2  0  0  0  0  0  0  0  0  0  0
#   308: -2  0  0  0  0  0  0  0  0  0  0
#   319: -2  0  0  0  0  0  0  0  0  0  0
#   330: -2  0  0  0  0  0  0  0  0  0  0
#   341: -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2
#
# Cell values:
#   empty: 0
#   block: -1
#   wall:  -2

    # Initialize the board at addresses 121-352
    121
.init_board__walls:
    ^ -2 store
    11+
    ^ 341 j< .init_board__walls
.init_board__floor:
    ^ -2 store
    1+
    ^ 353 j< .init_board__floor
    drop

    call draw_empty_board

# Spawns the next piece at the top of the board.
# ( -- !)
.game_loop__spawn_piece:
    5 # Piece position
    call rand_piece
    call check_collision jn game_over
    call draw_piece
# Reads a key press from the user.
# (pos piece -- !)
.game_loop__read_key:
    call move_cursor_bottom_right
    115 readc
    call erase_piece
    2dup
    115 retrieve
    ^ 'j'  j= .game_loop__key_left
    ^ 'k'  j= .game_loop__key_down
    ^ 'l'  j= .game_loop__key_right
    ^ 'i'  j= .game_loop__key_rotate
    ^ '\e' j= .game_loop__key_quit
    drop
    jmp .game_loop__no_move
.game_loop__key_left:
    drop swap 1- swap
    jmp .game_loop__try_move
.game_loop__key_down:
    drop swap 11+ swap
    jmp .game_loop__move_down
.game_loop__key_right:
    drop swap 1+ swap
    jmp .game_loop__try_move
.game_loop__key_rotate:
    drop 5+ retrieve 6*
    jmp .game_loop__try_move
.game_loop__key_quit:
    3drop
    jmp game_over

# Moves the piece left, right, or rotates it.
# (pos piece pos' piece' -- ! pos'' piece'')
.game_loop__try_move:
    call check_collision jn .game_loop__no_move
    jmp .game_loop__move

# Moves the piece down or places it.
# (pos piece pos' piece' -- ! pos'' piece'')
.game_loop__move_down:
    call check_collision jn .game_loop__place_piece
    jmp .game_loop__move

# Moves the piece.
# (pos piece pos' piece' -- ! pos' piece')
.game_loop__move:
    # Discard old position using heap temporaries
    116 swap store
    117 swap store
    2drop
    117 retrieve
    116 retrieve
    call draw_piece
    jmp .game_loop__read_key

# Redraws the unmoved piece.
# (pos piece pos' piece' -- ! pos piece)
.game_loop__no_move:
    2drop
    call draw_piece
    jmp .game_loop__read_key

# Places the piece, then spawns the next.
# (pos piece pos' piece' -- !)
.game_loop__place_piece:
    2drop
    call draw_piece
    2drop
    call remove_filled_lines
    jmp .game_loop__spawn_piece

# Quits the game and cleans up the bottom right corner of the board.
# (pos piece -- !)
game_over:
    call draw_piece
    2drop
    call move_cursor_bottom_right
    call reverse_color
    " \n" prints  # Fill empty bottom-right corner
    "\e[G" prints # Move cursor to start of line
    call reset_color
    end

# Returns the next piece and updates the pseudorandom state.
# ( -- piece)
rand_piece:
    # Update the rand state to (rand*279470273)%4294967291
    114
    ^ retrieve 279470273* 4294967291%
    swap ^1 store
    # Return (rand%7)*6
    7% 6* ret

# Removes any filled lines.
# ( -- )
remove_filled_lines:
    341
    # Iterate lines, starting at the bottom
.remove_filled_lines__loop_line:
    11/ 11* 1-
    ^ 122 j< .remove_filled_lines__ret
    # Iterate columns, starting at the right
.remove_filled_lines__loop_col:
    ^ retrieve jz .remove_filled_lines__loop_line
    1-
    ^ 11% jz .remove_filled_lines__remove_line
    jmp .remove_filled_lines__loop_col
.remove_filled_lines__remove_line:
    ^ 11/ 10- call remove_line
    ^ call shift_board_lines
    11+
    jmp .remove_filled_lines__loop_line
.remove_filled_lines__ret:
    drop ret

# Shifts lines above pos in heap down by one.
# (pos -- )
shift_board_lines:
    ^ ^ retrieve
    swap 11+ swap store
    ^ 122 j= .shift_board_lines__clear_top
    1-
    jmp shift_board_lines
    # Set top line to 0
.shift_board_lines__clear_top:
    ^ 0 store
    1+
    ^ 132 j= .shift_board_lines__ret
    jmp .shift_board_lines__clear_top
.shift_board_lines__ret:
    drop ret

# Checks whether the piece collides with other blocks or a wall. Returns -1 on
# collision and 0 otherwise.
# (pos piece -- pos piece collided?)
check_collision:
    ^1 121+ ^1
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    2drop 0 ret
.check_collision__collided:
    2drop -1 ret

# Draws the piece on the screen and in the heap (sets blocks to -1).
# (pos piece -- pos piece)
draw_piece:
    call draw_piece_screen
    ^1 121+ ^1
    1+ ^ retrieve ^2 + -1 store
    1+ ^ retrieve ^2 + -1 store
    1+ ^ retrieve ^2 + -1 store
    1+ ^ retrieve ^2 + -1 store
    2drop ret

# Erases the piece on the screen and in the heap (sets blocks to 0).
# (pos piece -- pos piece)
erase_piece:
    call erase_piece_screen
    ^1 121+ ^1
    1+ ^ retrieve ^2 + 0 store
    1+ ^ retrieve ^2 + 0 store
    1+ ^ retrieve ^2 + 0 store
    1+ ^ retrieve ^2 + 0 store
    2drop ret

# Draws the piece on the screen.
# (pos piece -- pos piece)
draw_piece_screen:
    ^ retrieve call set_background
    jmp .draw_piece_screen

# Erases the piece on the screen.
# (pos piece -- pos piece)
erase_piece_screen:
    9 call set_background # default

.draw_piece_screen:
    1+ ^ retrieve ^2 + call draw_block_screen
    1+ ^ retrieve ^2 + call draw_block_screen
    1+ ^ retrieve ^2 + call draw_block_screen
    1+ ^ retrieve ^2 + call draw_block_screen
    4-
    ret

# Draws a block at the given position on the screen.
# (pos -- )
draw_block_screen:
    ^
    # Move cursor to line (n/11+1), col ((n%11)*2+1)
    "\e[" prints
    11/ 1+ printi
    ';' printc
    11% 2* 1+ printi
    'H' printc
    "\e[2X" prints # Erase next 2 characters without moving cursor
    "  " prints
    ret

# Removes a filled line and shifts the above lines down.
# (line -- )
remove_line:
    call reset_color
    "\e[" prints printi 'H' printc # Move cursor to line
    "\e[1M" prints # Delete current line and shift remaining lines up
    jmp draw_board_line # Add empty line at top

# Draws an empty board.
# ( -- )
draw_empty_board:
    "\e[2J" prints # Clear entire screen
    # Draw floor except for bottom-right corner
    "\e[H" prints # Move cursor to upper-left corner
    call reverse_color
    23 call print_spaces
    # Draw 20 lines of walls
    -20
.draw_empty_board__loop:
    call draw_board_line
    1+
    ^ jn .draw_empty_board__loop
    drop ret

# Inserts a line and walls at the top of the board.
# ( -- )
draw_board_line:
    call reset_color
    "\e[H" prints # Move cursor to upper-left corner
    "\e[L" prints # Insert line at cursor
    call reverse_color
    "  " prints       # Draw left wall
    "\e[23G  " prints # Draw right wall at column 23
    ret

# Moves cursor to the bottom-right corner, where user input is read.
# ( -- )
move_cursor_bottom_right:
    "\e[21;24H" prints # Move cursor to line 21, col 24
    jmp reset_color

# Sets reverse video on.
# ( -- )
reverse_color:
    "\e[0;7m" prints
    ret

# Resets attributes and sets the background color, given 0-7.
#   40 black
#   41 red
#   42 green
#   43 yellow
#   44 blue
#   45 magenta
#   46 cyan
#   47 white
# (color -- )
set_background:
    "\e[0;4" prints
    printi
    'm' printc
    ret

# Resets all terminal attributes.
# ( -- )
reset_color:
    "\e[0m" prints
    ret

# Prints n spaces.
# (n -- )
print_spaces:
    ^ jz .print_spaces__ret
    ' ' printc
    1-
    jmp print_spaces
.print_spaces__ret:
    drop ret

# Prints the board state below the board.
# ( -- )
debug_dump_board:
    "\e[22H" prints # Move cursor to line 22
    call reset_color
    "\e[0J" prints # Clear from cursor to screen end
    121
.debug_dump_board__loop:
    ^ 11% jz .debug_dump_board__line_number
.debug_dump_board__cell:
    ' ' printc
    ^ retrieve printi
    1+
    ^ 353 j< .debug_dump_board__loop
    '\n' printc
    drop
    jmp debug_dump_stack
.debug_dump_board__line_number:
    '\n' printc
    ^ printi
    ':' printc
    jmp .debug_dump_board__cell

# Prints the values on the stack nondestructively. Requires that the sentinel
# -999999999 be under the stack region to print. Limited to up to 10 elements.
# (-999999999 s... -- -999999999 s...)
debug_dump_stack:
    "\e[46H" prints # Move cursor to line 36
    call reset_color
    "\e[0J" prints # Clear from cursor to screen end
    ^   ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^1  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^2  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^3  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^4  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^5  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^6  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^7  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^8  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^9  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^10 ^ -999999999 j= .debug_dump_stack__ret
    "[truncated]\n" prints
.debug_dump_stack__ret:
    drop ret
