# Copyright 2008 Peter De Wachter
# Copyright 2020-2022 Andrew Archibald

# Heap usage:
#   0-111   piece rotations
#   112-146 colors
#   147     color depth
#   148     rand
#   149     read char
#   150     tmp
#   151     tmp
#   154-385 board

# Piece rotations are encoded as four directions, each with the offsets for the
# four blocks.
#
# Block offsets in 4x4 grid:
#   0  1  2  4
#   11 12 13 14
#   22 23 24 25
#   33 34 35 36

    # Piece rotations:
    # O
    # .XX.  .XX.  .XX.  .XX.
    # .XX.  .XX.  .XX.  .XX.
    # ....  ....  ....  ....
    # ....  ....  ....  ....
    1  2  12 13
    1  2  12 13
    1  2  12 13
    1  2  12 13
    # I
    # ....  ..X.  ....  .X..
    # XXXX  ..X.  ....  .X..
    # ....  ..X.  XXXX  .X..
    # ....  ..#.  ....  .#..
    11 12 13 14
    2  13 24 35
    22 23 24 25
    1  12 23 34
    # T
    # .X.  .X.  ...  .X.
    # XXX  .XX  XXX  XX.
    # ...  .X.  .X.  .X.
    1  11 12 13
    1  12 13 23
    11 12 13 23
    1  11 12 23
    # L
    # ..X  .X.  ...  XX.
    # XXX  .X.  XXX  .X.
    # ...  .XX  X..  .X.
    2  11 12 13
    1  12 23 24
    11 12 13 22
    0  1  12 23
    # J
    # X..  .XX  ...  .X.
    # XXX  .X.  XXX  .X.
    # ...  .X.  ..X  XX.
    0  11 12 13
    1  2  12 23
    11 12 13 24
    1  12 22 23
    # S
    # .XX  .X.  ...  X..
    # XX.  .XX  .XX  XX.
    # ...  ..X  XX.  .X.
    1  2  11 12
    1  12 13 24
    12 13 22 23
    0  11 12 23
    # Z
    # XX.  ..X  ...  .X.
    # .XX  .XX  XX.  XX.
    # ...  .X.  .XX  X..
    0  1  12 13
    2  12 13 23
    11 12 23 24
    1  11 12 22

    # Piece colors:
    # Exact 24-bit RGB color from Guideline and approximated fallbacks from ANSI
    # 256- and 16-color palettes.
    254 203 0   220 43 # O | #FECB00 (yellow)     | 220 ~#FFD700 | 43 (yellow)
    0   159 218 39  46 # I | #009FDA (light blue) | 39  ~#00AFFF | 46 (cyan)
    149 45  152 90  45 # T | #952D98 (purple)     | 90  ~#870087 | 45 (magenta)
    255 121 0   208 47 # L | #FF7900 (orange)     | 208 ~#FF8700 | 47 (white)
    0   101 189 25  44 # J | #0065BD (dark blue)  | 25  ~#005FAF | 44 (blue)
    105 190 40  70  42 # S | #69BE28 (green)      | 70  ~#5FAF00 | 42 (green)
    237 41  57  9   41 # Z | #ED2939 (red)        | 9   ~#EF2929 | 41 (red)

    # Store piece rotations and colors seed at addresses 0-146
    146
.init_pieces:
    swap ^1 swap
    store
    1-
    ^ jn .init_pieces__break
    jmp .init_pieces
.init_pieces__break:
    drop

# Initial board:
#
#   154: -2  0  0  0  0  0  0  0  0  0  0
#   165: -2  0  0  0  0  0  0  0  0  0  0
#   176: -2  0  0  0  0  0  0  0  0  0  0
#   187: -2  0  0  0  0  0  0  0  0  0  0
#   198: -2  0  0  0  0  0  0  0  0  0  0
#   209: -2  0  0  0  0  0  0  0  0  0  0
#   220: -2  0  0  0  0  0  0  0  0  0  0
#   231: -2  0  0  0  0  0  0  0  0  0  0
#   242: -2  0  0  0  0  0  0  0  0  0  0
#   253: -2  0  0  0  0  0  0  0  0  0  0
#   264: -2  0  0  0  0  0  0  0  0  0  0
#   275: -2  0  0  0  0  0  0  0  0  0  0
#   286: -2  0  0  0  0  0  0  0  0  0  0
#   297: -2  0  0  0  0  0  0  0  0  0  0
#   308: -2  0  0  0  0  0  0  0  0  0  0
#   319: -2  0  0  0  0  0  0  0  0  0  0
#   330: -2  0  0  0  0  0  0  0  0  0  0
#   341: -2  0  0  0  0  0  0  0  0  0  0
#   352: -2  0  0  0  0  0  0  0  0  0  0
#   363: -2  0  0  0  0  0  0  0  0  0  0
#   374: -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2 -2
#
# Cell values:
#   empty: 0
#   block: -1
#   wall:  -2

    # Initialize the board at addresses 154-385
    154
.init_board__walls:
    ^ -2 store
    11+
    ^ 374 j< .init_board__walls
.init_board__floor:
    ^ -2 store
    1+
    ^ 386 j< .init_board__floor
    drop

    # Read the supported color depth
    147 readi

    # Read the random seed
    148
    ^ readi
    ^ retrieve
    ^ jz .init_seed__zero
    ^ jn .init_seed__neg
    2drop
    jmp .init_seed__done
.init_seed__zero:
    drop 123456 store
    jmp .init_seed__done
.init_seed__neg:
    neg store
.init_seed__done:

    call draw_empty_board

# Spawns the next piece at the top of the board.
# ( -- !)
.game_loop__spawn_piece:
    4 # Piece position
    call rand_piece 16*
    call draw_piece
    call check_collision jn game_over
    call draw_ghost_piece
# Reads a key press from the user.
# (pos piece -- !)
.game_loop__read_key:
    call move_cursor_bottom_right
    2dup
    149 ^ readc retrieve
    ^ 'w'  j= .game_loop__rotate
    ^ 'a'  j= .game_loop__move_left
    ^ 's'  j= .game_loop__move_down
    ^ 'd'  j= .game_loop__move_right
    ^ 'e'  j= .game_loop__drop
    ^ 'q'  j= .game_loop__quit
    ^ 'i'  j= .game_loop__rotate
    ^ 'j'  j= .game_loop__move_left
    ^ 'k'  j= .game_loop__move_down
    ^ 'l'  j= .game_loop__move_right
    ^ 'o'  j= .game_loop__drop
    ^ '\e' j= .game_loop__quit
    drop
.game_loop__no_move:
    2drop
    jmp .game_loop__read_key

.game_loop__rotate:
    drop ^ 16/ 16* swap 4+ 16% +
    jmp .game_loop__try_move
.game_loop__move_left:
    drop swap 1- swap
    jmp .game_loop__try_move
.game_loop__move_right:
    drop swap 1+ swap
    jmp .game_loop__try_move
.game_loop__move_down:
    drop swap 11+ swap
    call check_collision jn .game_loop__place_piece
    jmp .game_loop__move
.game_loop__drop:
    3drop
    call erase_piece
    call hard_drop_piece
    call place_piece
    jmp .game_loop__spawn_piece
.game_loop__quit:
    3drop
    jmp game_over

# Moves the piece left, right, or rotates it.
# (pos piece pos' piece' -- ! pos'' piece'')
.game_loop__try_move:
    call check_collision jn .game_loop__no_move
# Moves the piece.
# (pos piece pos' piece' -- ! pos' piece')
.game_loop__move:
    # Discard old position using heap temporaries
    150 swap store
    151 swap store
    call erase_piece
    call erase_ghost_piece
    2drop
    151 retrieve
    150 retrieve
    call draw_ghost_piece
    call draw_piece
    jmp .game_loop__read_key
# Places the piece, then spawns the next.
# (pos piece pos' piece' -- !)
.game_loop__place_piece:
    2drop
    call place_piece
    jmp .game_loop__spawn_piece

# Quits the game and cleans up the bottom right corner of the board.
# (pos piece -- !)
game_over:
    2drop
    call move_cursor_bottom_right
    call reverse_color
    " \n" prints  # Fill empty bottom-right corner
    "\e[G" prints # Move cursor to start of line
    call reset_color
    end

# Returns the next piece (0-6) and updates the pseudorandom state.
# ( -- piece)
rand_piece:
    # Update the rand state to (rand*279470273)%4294967291
    148
    ^ retrieve 279470273* 4294967291%
    swap ^1 store
    # Return rand%7
    7% ret

# Removes any filled lines.
# ( -- )
remove_filled_lines:
    374
    # Iterate lines, starting at the bottom
.remove_filled_lines__loop_line:
    11/ 11* 1-
    ^ 155 j< .remove_filled_lines__ret
    # Iterate columns, starting at the right
.remove_filled_lines__loop_col:
    ^ retrieve jz .remove_filled_lines__loop_line
    1-
    ^ 11% jz .remove_filled_lines__remove_line
    jmp .remove_filled_lines__loop_col
.remove_filled_lines__remove_line:
    ^ 11/ 13- call remove_line
    ^ call shift_board_lines
    11+
    jmp .remove_filled_lines__loop_line
.remove_filled_lines__ret:
    drop ret

# Shifts lines above pos in heap down by one.
# (pos -- )
shift_board_lines:
    ^ ^ retrieve
    swap 11+ swap store
    1-
    154 ^1 j< shift_board_lines
    # Set top line to 0
.shift_board_lines__clear_top:
    ^ 0 store
    1+
    ^ 165 j< .shift_board_lines__clear_top
    drop ret

# Checks whether the piece collides with other blocks or a wall. Returns -1 on
# collision and 0 otherwise.
# (pos piece -- pos piece collided?)
check_collision:
    ^1 154+ ^1
       ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    1+ ^ retrieve ^2 + retrieve jn .check_collision__collided
    2drop 0 ret
.check_collision__collided:
    2drop -1 ret

# Places the piece on the board and removes any filled lines.
# (pos piece -- )
place_piece:
    call draw_piece
    swap 154+ swap
       ^ retrieve ^2 + -1 store
    1+ ^ retrieve ^2 + -1 store
    1+ ^ retrieve ^2 + -1 store
    1+   retrieve    + -1 store
    jmp remove_filled_lines

# Hard drops the piece.
# (pos piece -- pos' piece')
hard_drop_piece:
    swap 11+ swap
    call check_collision jz hard_drop_piece
    swap 11- swap
    ret

# Draws the piece.
# (pos piece -- pos piece)
draw_piece:
    ^ 16/ 5* 112+
       ^ retrieve swap
    1+ ^ retrieve swap
    1+ ^ retrieve swap
    1+ ^ retrieve swap
    1+   retrieve
# Draws the piece with the given RGB color.
# (pos piece r g b c256 c16 -- pos piece)
draw_piece_colored:
    call set_color
.draw_piece:
    ^  ^ retrieve ^3 + call draw_block
    1+ ^ retrieve ^3 + call draw_block
    1+ ^ retrieve ^3 + call draw_block
    1+   retrieve ^2 + call draw_block
    ret

# Erases the piece.
# (pos piece -- pos piece)
erase_piece:
    "\e[0;49m" prints # Reset and set background to default
    jmp .draw_piece

# Draws a block at the given position.
# (pos -- )
draw_block:
    ^
    # Move cursor to line (n/11+1), col ((n%11)*2+1)
    "\e[" prints
    11/ 1+ printi
    ';' printc
    11% 2* 1+ printi
    'H' printc
    "\e[2X" prints # Erase next 2 characters without moving cursor
    "  " prints
    ret

# Draws a ghost piece at the bottom of the field.
# (pos piece -- pos piece)
draw_ghost_piece:
    2dup call hard_drop_piece
    # Arbitrary color, not specified in Guideline
    # #626262 | 241 ~#626262 | 100 (bright black)
    98 98 98 241 100 call draw_piece_colored
    2drop ret

# Erases the ghost piece at the bottom of the field.
# (pos piece -- pos piece)
erase_ghost_piece:
    2dup call hard_drop_piece
    call erase_piece
    2drop ret

# Removes a filled line and shifts the above lines down.
# (line -- )
remove_line:
    call reset_color
    "\e[" prints printi 'H' printc # Move cursor to line
    "\e[1M" prints # Delete current line and shift remaining lines up
    jmp draw_board_line # Add empty line at top

# Draws an empty board.
# ( -- )
draw_empty_board:
    "\e[2J" prints # Clear entire screen
    # Draw floor except for bottom-right corner
    "\e[H" prints # Move cursor to upper-left corner
    call reverse_color
    23 call print_spaces
    # Draw 20 lines of walls
    -20
.draw_empty_board__loop:
    call draw_board_line
    1+
    ^ jn .draw_empty_board__loop
    drop ret

# Inserts a line and walls at the top of the board.
# ( -- )
draw_board_line:
    call reset_color
    "\e[H" prints # Move cursor to upper-left corner
    "\e[L" prints # Insert line at cursor
    call reverse_color
    "  " prints       # Draw left wall
    "\e[23G  " prints # Draw right wall at column 23
    ret

# Moves cursor to the bottom-right corner, where user input is read.
# ( -- )
move_cursor_bottom_right:
    "\e[21;24H" prints # Move cursor to line 21, col 24
    jmp reset_color

# Sets background to a 24-bit RGB color or to a fallback color from the ANSI
# 256- and 16-color palettes, depending on the terminal capabilities.
# (r g b c256 c16 -- )
set_color:
    147 retrieve
    ^ 24  j= .set_color__24_bit
      256 j= .set_color__256_palette
    "\e[0;" prints
# Use 16-color palette
    printi 'm' printc
    4drop ret
# Use 24-bit color
.set_color__24_bit:
    3drop
    "\e[0;48;2;" prints
    ^2   printi ';' printc # R
    swap printi ';' printc # G
         printi 'm' printc # B
    drop ret
# Use 256-color palette
.set_color__256_palette:
    drop 3slide
    "\e[0;48;5;" prints
    printi 'm' printc
    ret


# Sets reverse video on.
# ( -- )
reverse_color:
    "\e[0;7m" prints
    ret

# Resets all terminal attributes.
# ( -- )
reset_color:
    "\e[0m" prints
    ret

# Prints n spaces.
# (n -- )
print_spaces:
    ^ jz .print_spaces__ret
    ' ' printc
    1-
    jmp print_spaces
.print_spaces__ret:
    drop ret

# Prints the board state below the board.
# ( -- )
debug_dump_board:
    "\e[22H" prints # Move cursor to line 22
    call reset_color
    "\e[0J" prints # Clear from cursor to screen end
    154
.debug_dump_board__loop:
    ^ 11% jz .debug_dump_board__line_number
.debug_dump_board__cell:
    ' ' printc
    ^ retrieve printi
    1+
    ^ 386 j< .debug_dump_board__loop
    '\n' printc
    drop
    jmp debug_dump_stack
.debug_dump_board__line_number:
    '\n' printc
    ^ printi
    ':' printc
    jmp .debug_dump_board__cell

# Prints the values on the stack nondestructively. Requires that the sentinel
# -999999999 be under the stack region to print. Limited to up to 10 elements.
# (-999999999 s... -- -999999999 s...)
debug_dump_stack:
    "\e[46H" prints # Move cursor to line 36
    call reset_color
    "\e[0J" prints # Clear from cursor to screen end
    ^   ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^1  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^2  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^3  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^4  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^5  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^6  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^7  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^8  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^9  ^ -999999999 j= .debug_dump_stack__ret printi '\n' printc
    ^10 ^ -999999999 j= .debug_dump_stack__ret
    "[truncated]\n" prints
.debug_dump_stack__ret:
    drop ret
